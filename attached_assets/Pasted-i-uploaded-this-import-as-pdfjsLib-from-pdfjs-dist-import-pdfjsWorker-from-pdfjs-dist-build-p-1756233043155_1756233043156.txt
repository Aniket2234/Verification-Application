i uploaded this

import * as pdfjsLib from "pdfjs-dist";
import pdfjsWorker from "pdfjs-dist/build/pdf.worker?url";

export interface AadharData {
  name: string;
  dob: string;
  aadhar: string;
  gender: string;
}

export interface OCRResponse {
  success: boolean;
  data?: AadharData;
  error?: string;
}

export class OCRService {
  private static instance: OCRService;

  private constructor() {}

  public static getInstance(): OCRService {
    if (!OCRService.instance) {
      OCRService.instance = new OCRService();
    }
    return OCRService.instance;
  }

  public async processAadharDocument(file: File): Promise<OCRResponse> {
    try {
      // Accept PDFs even if browser reports as application/octet-stream
      const isPDF = file.type.includes('pdf') || 
                   file.type === 'application/octet-stream' || 
                   file.name.toLowerCase().endsWith('.pdf');
      
      if (!isPDF) {
        return {
          success: false,
          error: "Only PDF Aadhaar files are supported."
        };
      }

      // Extract text from PDF
      const extractedText = await this.processPDF(file);
      
      if (!extractedText || extractedText.length < 100) {
        return {
          success: false,
          error: "Unable to extract text from PDF. Please ensure it's a valid UIDAI e-Aadhaar PDF."
        };
      }

      // Parse Aadhaar info with strict validation
      const aadharData = this.extractAadharInfo(extractedText);
      if (aadharData) {
        return { 
          success: true, 
          data: aadharData 
        };
      }

      return {
        success: false,
        error: "Could not extract valid Aadhaar details from PDF. Please ensure all required information is clearly visible."
      };
    } catch (err) {
      return {
        success: false,
        error: `Failed to process Aadhaar PDF: ${err instanceof Error ? err.message : 'Unknown error'}`
      };
    }
  }

  private async processPDF(file: File): Promise<string> {
    // Configure PDF.js worker for Vite/Replit
    pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;

    const arrayBuffer = await file.arrayBuffer();
    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;

    let extractedText = "";

    // Extract text from all pages
    for (let i = 1; i <= pdf.numPages; i++) {
      const page = await pdf.getPage(i);
      const content = await page.getTextContent();
      const strings = content.items
        .map((item: any) => ("str" in item ? item.str : ""))
        .filter((s: string) => s.trim().length > 0);
      extractedText += strings.join(" ") + "\n";
    }

    return extractedText.trim();
  }

  private extractAadharInfo(text: string): AadharData | null {
    const result = {
      name: "",
      dob: "",
      aadhar: "",
      gender: ""
    };

    // Extract valid Aadhaar Number (12 digits only, not phone/VID/enrollment)
    result.aadhar = this.extractValidAadharNumber(text);
    if (!result.aadhar) return null;

    // Extract DOB with year validation (1900-2015)
    result.dob = this.extractValidDOB(text);
    if (!result.dob) return null;

    // Extract Gender
    result.gender = this.extractGender(text);
    if (!result.gender) return null;

    // Extract Name using context and fallback methods
    result.name = this.extractName(text);
    if (!result.name) return null;

    return result;
  }

  private extractValidAadharNumber(text: string): string {
    // Split text into lines to analyze context
    const lines = text.split('\n').map(line => line.trim());
    
    // Find all potential 12-digit numbers (with or without spaces)
    const numberPattern = /\b\d{4}\s+\d{4}\s+\d{4}\b|\b\d{12}\b/g;
    const potentialNumbers: Array<{number: string, context: string, lineIndex: number}> = [];
    
    lines.forEach((line, index) => {
      let match;
      while ((match = numberPattern.exec(line)) !== null) {
        const cleanNum = match[0].replace(/\s/g, '');
        if (cleanNum.length === 12) {
          potentialNumbers.push({
            number: cleanNum,
            context: line.toLowerCase(),
            lineIndex: index
          });
        }
      }
      // Reset regex for next line
      numberPattern.lastIndex = 0;
    });

    // Filter out invalid numbers with strict rules
    for (const item of potentialNumbers) {
      const { number, context } = item;
      
      // Rule 1: Must be exactly 12 digits
      if (number.length !== 12) continue;
      
      // Rule 2: Reject if appears after "VID" keyword
      if (context.includes('vid') && context.indexOf('vid') < context.indexOf(number.substring(0, 4))) {
        continue;
      }
      
      // Rule 3: Reject phone numbers (typically start with 9,8,7,6 and appear with mobile context)
      if ((number.startsWith('9') || number.startsWith('8') || 
           number.startsWith('7') || number.startsWith('6')) &&
          (context.includes('mobile') || context.includes('phone'))) {
        continue;
      }
      
      // Rule 4: Reject enrollment numbers (typically longer or contain slashes)
      if (context.includes('enrolment') || context.includes('enrollment') || 
          context.includes('नामांकन') || context.includes('/')) {
        continue;
      }
      
      // Rule 5: Reject repeated digits
      if (/^(\d)\1+$/.test(number)) continue;
      
      // Rule 6: Additional VID rejection - numbers that commonly appear in VID format
      if (number.startsWith('9171') || number.startsWith('9174') || 
          number.startsWith('9999') || number.startsWith('9666')) {
        continue;
      }
      
      // Valid Aadhaar number found - return the first one that passes all rules
      return number;
    }
    
    return "";
  }

  private extractValidDOB(text: string): string {
    const dobPatterns = [
      /(?:जन्म\s*तिथि|जन्म\s*ितिथ|DOB):\s*(\d{2}\/\d{2}\/\d{4})/i,
      /DOB:\s*(\d{2}\/\d{2}\/\d{4})/i,
      /Date\s*of\s*Birth:\s*(\d{2}\/\d{2}\/\d{4})/i
    ];

    for (const pattern of dobPatterns) {
      const match = text.match(pattern);
      if (match) {
        const dob = match[1];
        const year = parseInt(dob.split('/')[2]);
        
        // Validate year range (1900-2015)
        if (year >= 1900 && year <= 2015) {
          return dob;
        }
      }
    }

    return "";
  }

  private extractGender(text: string): string {
    const genderMatch = text.match(/(पुरुष|पु\s*ष|MALE|महिला|FEMALE)/i);
    if (genderMatch) {
      const genderText = genderMatch[1].toLowerCase().replace(/\s/g, '');
      return (genderText.includes('male') || genderText.includes('पुरुष') || genderText.includes('पुष')) ? "Male" : "Female";
    }
    return "";
  }

  private extractName(text: string): string {
    // Method 1: Extract name from "To" section
    const toMatch = text.match(/\bTo\b\s*([\s\S]*?)(?=\n.*?(?:C\/O:|Flat|Address|VTC|District|PIN|Mobile))/i);
    if (toMatch) {
      const toSection = toMatch[1].trim();
      // Look for English name (skip Hindi line, take English line)
      const lines = toSection.split('\n').map(l => l.trim()).filter(l => l.length > 0);
      
      for (const line of lines) {
        // Skip Hindi text lines and focus on English names
        if (!/[अ-ह]/.test(line)) {
          const nameMatch = line.match(/^([A-Z][a-z]+(?:\s+[A-Z][a-z]+){1,3})$/);
          if (nameMatch && this.isValidName(nameMatch[1])) {
            return nameMatch[1].trim();
          }
        }
      }
    }

    // Method 2: Find name before address context
    const addressKeywords = ['C/O:', 'Flat', 'Floor', 'Near', 'District', 'State', 'PIN', 'Maharashtra'];
    const lines = text.split('\n').map(l => l.trim()).filter(l => l.length > 0);
    
    for (let i = 0; i < lines.length - 1; i++) {
      const line = lines[i];
      const nextFewLines = lines.slice(i + 1, i + 4).join(' ');
      
      // Check if upcoming lines contain address keywords
      const hasAddressKeywords = addressKeywords.some(keyword => 
        nextFewLines.toLowerCase().includes(keyword.toLowerCase())
      );
      
      if (hasAddressKeywords && !/[अ-ह]/.test(line)) {
        const nameMatch = line.match(/^([A-Z][a-z]+(?:\s+[A-Z][a-z]+){1,3})$/);
        if (nameMatch && this.isValidName(nameMatch[1])) {
          return nameMatch[1].trim();
        }
      }
    }

    // Method 3: Find most frequent proper noun (fallback)
    const namePattern = /\b([A-Z][a-z]+(?:\s+[A-Z][a-z]+){1,3})\b/g;
    const foundNames: string[] = [];
    let match;

    while ((match = namePattern.exec(text)) !== null) {
      const candidateName = match[1].trim();
      if (this.isValidName(candidateName)) {
        foundNames.push(candidateName);
      }
    }

    // Return most frequent valid name
    if (foundNames.length > 0) {
      const nameCounts: { [key: string]: number } = {};
      foundNames.forEach(name => {
        nameCounts[name] = (nameCounts[name] || 0) + 1;
      });

      const mostFrequent = Object.entries(nameCounts)
        .sort((a, b) => b[1] - a[1])[0];
      
      return mostFrequent[0];
    }

    return "";
  }

  private isValidName(name: string): boolean {
    // Filter out common non-name words
    const invalidWords = [
      'Unique', 'Identification', 'Authority', 'India', 'Government',
      'Compound', 'Chawl', 'Road', 'Near', 'Mandir', 'District', 'State',
      'Maharashtra', 'Details', 'Address', 'Signature', 'Digitally',
      'Date', 'Issue', 'Download', 'VTC', 'PIN', 'Code', 'Floor', 'Wing',
      'CHS', 'Flat', 'Bhandar', 'Nagar', 'West', 'Thane', 'Download',
      'Enrolment', 'Mobile'
    ];

    const words = name.split(' ');
    for (const word of words) {
      if (invalidWords.some(invalid => word.toLowerCase().includes(invalid.toLowerCase()))) {
        return false;
      }
    }

    // Name should be reasonable length and contain only letters and spaces
    return name.length >= 6 && 
           name.length <= 50 && 
           /^[A-Za-z\s]+$/.test(name) &&
           words.length >= 2 && 
           words.length <= 4;
  }
}

export const ocrService = OCRService.getInstance();